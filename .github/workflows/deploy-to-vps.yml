name: Deploy - to VPS via GHCR

on:
  workflow_call:
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      GHCR_TOKEN:
        required: true
      GHCR_USERNAME:
        required: true
      DISCORD_WEBHOOK:
        required: true
      GHCR_ORG:
        required: true
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      COMPOSE_PATH:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üöÄ SSH to VPS and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            set -e

            GHCR_TOKEN="${GHCR_TOKEN}"
            GHCR_USERNAME="${GHCR_USERNAME}"
            GHCR_ORG="${GHCR_ORG}"
            IMAGE_NAME="${IMAGE_NAME}"
            COMPOSE_PATH="${COMPOSE_PATH}"
            
            echo "Pulling from GHCR : $GHCR_ORG"

            echo "Cleaning up old GHCR login (if any)..."
            docker logout ghcr.io || true

            echo "Logging into GHCR..."
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            echo "Pulling image: ghcr.io/$GHCR_ORG/$IMAGE_NAME:latest"
            docker pull ghcr.io/$GHCR_ORG/$IMAGE_NAME:latest

            echo "Restarting service with Docker Compose"
            docker compose -f $COMPOSE_PATH up -d

            echo "Cleaning up unused images..."
            docker image prune -f
          EOF
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_ORG: ${{ secrets.GHCR_ORG }}
          IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
          COMPOSE_PATH: ${{ inputs.COMPOSE_PATH }}
          
      - name: Send Discord Notification (Success)
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ‚úÖ **Deployment SUCCEEDED** on `${{ github.repository }}`
            üß± Image: `${{ inputs.IMAGE_NAME }}`
            üë§ Triggered by: `${{ github.actor }}`
            üîó [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord Notification (Failure)
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üî• **Deployment FAILED** on `${{ github.repository }}`
            üß± Image: `${{ inputs.IMAGE_NAME }}`
            üë§ Triggered by: `${{ github.actor }}`
            üö® Job: `${{ github.job }}`
            üîó [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
